<?xml version="1.0" encoding="UTF-8" standalone="no"?><umlet_diagram><help_text>// Uncomment the following line to change the fontsize:
// fontsize=14


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on UML elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use Â± or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text><zoom_level>10</zoom_level><element><type>com.umlet.element.base.Class</type><coordinates><x>150</x><y>120</y><w>100</w><h>30</h></coordinates><panel_attributes>Client
--
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>310</x><y>120</y><w>100</w><h>30</h></coordinates><panel_attributes>Invoker
--
</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Interface</type><coordinates><x>520</x><y>100</y><w>100</w><h>110</h></coordinates><panel_attributes>&lt;&lt;Interface&gt;&gt;
Command
--
execute()
undo()</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>480</x><y>250</y><w>160</w><h>120</h></coordinates><panel_attributes>Concrete Command
--
Receiver reciever;
--
execute(){
	reciever.action();
}
undo(){}</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>310</x><y>250</y><w>100</w><h>50</h></coordinates><panel_attributes>Reciever
--
action(){}</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>380</x><y>100</y><w>160</w><h>50</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>140;30;30;30</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>540</x><y>170</y><w>50</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>30;30;30;80</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>200</x><y>120</y><w>130</w><h>160</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>110;140;30;140;30;30</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>140</x><y>120</y><w>360</w><h>230</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>340;210;30;210;30;30</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>380</x><y>230</y><w>120</w><h>50</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>30;30;100;30</additional_attributes></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>0</x><y>40</y><w>210</w><h>60</h></coordinates><panel_attributes>The client is responsible for
creating a ConcreteCommand 
and its receiver</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>250</x><y>0</y><w>210</w><h>100</h></coordinates><panel_attributes>The invoker hols a command
and at some point ask the 
command to carry out a 
request by calling its execute()
method</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>650</x><y>250</y><w>190</w><h>60</h></coordinates><panel_attributes>The execute method invokes
the action(s) on the receiver
needed to fulfill the request</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>390</x><y>380</y><w>410</w><h>80</h></coordinates><panel_attributes>The ConcreteCommand defines a binding between an action
and Receiver. The Invoker makes a request by calling execute()
and the ConcreteCommand carries it out by calling one or more
actions on the Receiver</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>270</x><y>160</y><w>190</w><h>80</h></coordinates><panel_attributes>The Receiver knows how to
perform the work needed to 
carry out the request. Any 
class can act as a Receiver</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>490</x><y>10</y><w>480</w><h>80</h></coordinates><panel_attributes>Command declares an interface for all commands. As you already know,
a command is invoked through its execute() method, which asks a receiver 
to perform an action. You'll notice this interface has undo() method, which 
we will cover later in the chapter</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>110</x><y>480</y><w>700</w><h>140</h></coordinates><panel_attributes>In Jazz:
----------------------------------------------------------------------------------------------------------------------------------------------------
Client: com.pearson.jazz.flashremoting.service.JazzService
Invoker: com.pearson.jazz.services.JazzSession
Comand Interface: com.pearson.jazz.services.JazzProcessController
Command: com.pearson.jazz.services.controller.AssetsCommentingProcessController (Concrete Command)
Receiver: com.pearson.jazz.services.appservices.AssetCommentingService

</panel_attributes><additional_attributes/></element></umlet_diagram>