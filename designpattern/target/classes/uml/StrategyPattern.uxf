<?xml version="1.0" encoding="UTF-8" standalone="no"?><umlet_diagram><help_text>// Uncomment the following line to change the fontsize:
// fontsize=14


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on UML elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use Â± or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text><zoom_level>10</zoom_level><element><type>com.umlet.element.base.Interface</type><coordinates><x>830</x><y>20</y><w>100</w><h>90</h></coordinates><panel_attributes>&lt;&lt;interface&gt;&gt;
FlyBehavior
--
fly()
bg=blue
fg=blue</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Interface</type><coordinates><x>830</x><y>300</y><w>100</w><h>90</h></coordinates><panel_attributes>&lt;&lt;interface&gt;&gt;
QuarkBehavior
--
quack()
fg=blue
bg=blue</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>700</x><y>190</y><w>160</w><h>80</h></coordinates><panel_attributes>FlyWithWings
--
fly(){
	#implemets duck flying
}
bg=yellow</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>900</x><y>190</y><w>160</w><h>80</h></coordinates><panel_attributes>FlyWithWings
--
fly(){
	#implemets duck flying
}
bg=yellow</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>760</x><y>80</y><w>130</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>110;30;30;110</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>860</x><y>80</y><w>150</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>30;30;130;110</additional_attributes></element><element><type>com.umlet.element.base.Class</type><coordinates><x>810</x><y>490</y><w>160</w><h>80</h></coordinates><panel_attributes>Squeak
--
fly(){
	#implemets rubber duckie squeak
}
bg=yellow</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>630</x><y>490</y><w>160</w><h>80</h></coordinates><panel_attributes>Quack
--
quack(){
	#implemets duck quacking
}
bg=yellow</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>700</x><y>360</y><w>180</w><h>150</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>160;30;30;130</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>850</x><y>360</y><w>50</w><h>150</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>30;30;30;130</additional_attributes></element><element><type>com.umlet.element.base.Class</type><coordinates><x>990</x><y>490</y><w>160</w><h>80</h></coordinates><panel_attributes>MuteQuack
--
quack(){
	#ido nothing -can't quack
}
bg=yellow</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>870</x><y>360</y><w>220</w><h>150</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>30;30;200;130</additional_attributes></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>1050</x><y>310</y><w>130</w><h>60</h></coordinates><panel_attributes>Think of each set 
of behavior as a
family of algorithm</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>950</x><y>260</y><w>110</w><h>100</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>30;30;90;80</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>990</x><y>310</y><w>70</w><h>130</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>30;110;50;30</additional_attributes></element><element><type>com.umlet.element.base.Class</type><coordinates><x>250</x><y>100</y><w>210</w><h>200</h></coordinates><panel_attributes>/AbstractClass/
 Duck
--
FlyBehavior flyBehavior
QuackBehavior quackBehavior
--
swim()
display()
performQuack()
performFly()
setFlyBehavior()
setQuackBehavior()
#other duck-lick methods
bg=light_gray</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>430</x><y>20</y><w>430</w><h>150</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>410;30;30;130</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>430</x><y>130</y><w>400</w><h>230</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>380;210;30;30</additional_attributes></element><element><type>com.umlet.element.base.Class</type><coordinates><x>170</x><y>380</y><w>160</w><h>80</h></coordinates><panel_attributes>RedheadDuck
--
display(){
	#looks like a redhead
}
bg=yellow</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>0</x><y>380</y><w>160</w><h>80</h></coordinates><panel_attributes>MollarDuck
--
display(){
	#looks like a mallard
}
bg=yellow</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>340</x><y>380</y><w>160</w><h>80</h></coordinates><panel_attributes>RubberDuck
--
display(){
	#looks like a rubberduck
}
bg=yellow</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Class</type><coordinates><x>510</x><y>380</y><w>160</w><h>80</h></coordinates><panel_attributes>DecoyDuck
--
display(){
	#looks like a decoy duck
}
bg=yellow</panel_attributes><additional_attributes/></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>60</x><y>270</y><w>230</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>210;30;30;110</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>400</x><y>270</y><w>210</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>30;30;190;110</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>350</x><y>270</y><w>100</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>30;30;80;110</additional_attributes></element><element><type>com.umlet.element.base.Relation</type><coordinates><x>230</x><y>270</y><w>110</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>90;30;30;110</additional_attributes></element><element><type>com.umlet.element.custom.Text</type><coordinates><x>90</x><y>90</y><w>150</w><h>80</h></coordinates><panel_attributes>Clent makes use of
encapsulated family of
algorithms for both
flying and quackin</panel_attributes><additional_attributes/></element></umlet_diagram>